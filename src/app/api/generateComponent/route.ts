import { OpenAI } from 'openai';
import { NextResponse } from 'next/server';

// Initialize OpenAI client
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

// Define valid component types
const VALID_COMPONENT_TYPES = ['wheel', 'pedal', 'handlebar', 'saddle'] as const;
type ComponentType = typeof VALID_COMPONENT_TYPES[number];

// Interface for the request body
interface GenerateComponentRequest {
  componentType: ComponentType;
  description: string;
  parameters: Record<string, number>;
}

/**
 * Validates the request body
 * @param body - The request body to validate
 * @returns Tuple of [isValid, error message]
 */
function validateRequest(body: any): [boolean, string?] {
  if (!body) return [false, 'Request body is required'];
  
  if (!VALID_COMPONENT_TYPES.includes(body.componentType)) {
    return [false, `Component type must be one of: ${VALID_COMPONENT_TYPES.join(', ')}`];
  }
  
  if (typeof body.description !== 'string' || body.description.trim().length === 0) {
    return [false, 'Description is required and must be a non-empty string'];
  }
  
  if (!body.parameters || typeof body.parameters !== 'object') {
    return [false, 'Parameters object is required'];
  }

  return [true];
}

/**
 * Builds the prompt for OpenAI based on the component request
 */
function buildPrompt(request: GenerateComponentRequest): string {
  return `Generate a RhinoPython script that creates a parametric bicycle ${request.componentType}.
Description: "${request.description}"

The script should:
1. Use rhinoscriptsyntax (imported as 'rs')
2. Accept these parameters: ${Object.keys(request.parameters).join(', ')}
3. Create a complete, working 3D model
4. Use best practices for clean, maintainable code
5. Include error handling
6. Return the created geometry for baking

Example parameter values: ${JSON.stringify(request.parameters)}

Output ONLY the Python code, no explanations.
The code should start with 'import rhinoscriptsyntax as rs' and be ready to run.`;
}

export async function POST(request: Request) {
  console.log('üì• [generateComponent] Received request');
  
  try {
    const body = await request.json();
    console.log('üì¶ [generateComponent] Request body:', JSON.stringify(body, null, 2));

    // Validate request
    const [isValid, error] = validateRequest(body);
    console.log('üîç [generateComponent] Request validation:', { isValid, error });
    
    if (!isValid) {
      console.error('‚ùå [generateComponent] Validation error:', error);
      return NextResponse.json({ error }, { status: 400 });
    }

    // Build prompt for OpenAI
    const prompt = buildPrompt(body as GenerateComponentRequest);
    console.log('üìù [generateComponent] Generated prompt:', prompt);

    // Call OpenAI API
    console.log('ü§ñ [generateComponent] Calling OpenAI API...');
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "You are an expert in RhinoPython and parametric 3D modeling. Generate only valid, working Python code."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.2,
      max_tokens: 1500,
    });

    const generatedCode = completion.choices[0].message.content?.trim();
    if (!generatedCode) {
      throw new Error('No code generated by OpenAI');
    }

    console.log('‚ú® [generateComponent] Generated Python code:\n', generatedCode);
    console.log('‚úÖ [generateComponent] Successfully generated code');

    return NextResponse.json({ 
      code: generatedCode,
      componentType: body.componentType,
      parameters: body.parameters
    });

  } catch (error) {
    console.error('‚ùå [generateComponent] Error:', error);
    console.error('‚ùå [generateComponent] Stack trace:', error instanceof Error ? error.stack : 'No stack trace');
    return NextResponse.json(
      { 
        error: 'Failed to generate component definition',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
} 